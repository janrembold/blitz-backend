"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RDSStack = void 0;
const core_1 = require("@aws-cdk/core");
const aws_rds_1 = require("@aws-cdk/aws-rds");
const aws_secretsmanager_1 = require("@aws-cdk/aws-secretsmanager");
const aws_ec2_1 = require("@aws-cdk/aws-ec2");
class RDSStack extends core_1.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        this.databaseName = `blitz${props.stage}`;
        this.secret = new aws_secretsmanager_1.Secret(this, `${props.stage}-DBCredentialsSecret`, {
            secretName: `${props.stage}-credentials`,
            generateSecretString: {
                secretStringTemplate: JSON.stringify({
                    username: 'postgres',
                }),
                excludePunctuation: true,
                includeSpace: false,
                generateStringKey: 'password'
            }
        });
        this.postgresInstance = new aws_rds_1.DatabaseInstance(this, 'postgres-rds-instance', {
            engine: aws_rds_1.DatabaseInstanceEngine.postgres({ version: aws_rds_1.PostgresEngineVersion.VER_13_3 }),
            instanceType: aws_ec2_1.InstanceType.of(aws_ec2_1.InstanceClass.T3, aws_ec2_1.InstanceSize.MICRO),
            vpc: props.vpc,
            vpcPlacement: { subnetType: aws_ec2_1.SubnetType.PRIVATE_ISOLATED },
            storageEncrypted: true,
            databaseName: this.databaseName,
            credentials: aws_rds_1.Credentials.fromGeneratedSecret('postgres'),
            backupRetention: core_1.Duration.days(3)
            // multiAz: false,
            // allocatedStorage: 25,
            // storageType: StorageType.GP2,
            // deletionProtection: false,
        });
        new core_1.CfnOutput(this, 'Secret Username', { value: this.secret.secretValueFromJson('username').toString() });
        new core_1.CfnOutput(this, 'Secret Password', { value: this.secret.secretValueFromJson('password').toString() });
        new core_1.CfnOutput(this, 'Secret Name', { value: this.secret.secretName });
        new core_1.CfnOutput(this, 'Secret ARN', { value: this.secret.secretArn });
        new core_1.CfnOutput(this, 'Secret Full ARN', { value: this.secret.secretFullArn || '' });
    }
}
exports.RDSStack = RDSStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmRzLXN0YWNrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicmRzLXN0YWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHdDQUEwRTtBQUMxRSw4Q0FBaUk7QUFDakksb0VBQTREO0FBQzVELDhDQUE0RjtBQU81RixNQUFhLFFBQVMsU0FBUSxZQUFLO0lBTS9CLFlBQVksS0FBVSxFQUFFLEVBQVUsRUFBRSxLQUFvQjtRQUNwRCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUV4QixJQUFJLENBQUMsWUFBWSxHQUFHLFFBQVEsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBRTFDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSwyQkFBTSxDQUFDLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxLQUFLLHNCQUFzQixFQUFFO1lBQ2pFLFVBQVUsRUFBRSxHQUFHLEtBQUssQ0FBQyxLQUFLLGNBQWM7WUFDeEMsb0JBQW9CLEVBQUU7Z0JBQ2xCLG9CQUFvQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUM7b0JBQ2pDLFFBQVEsRUFBRSxVQUFVO2lCQUN2QixDQUFDO2dCQUNGLGtCQUFrQixFQUFFLElBQUk7Z0JBQ3hCLFlBQVksRUFBRSxLQUFLO2dCQUNuQixpQkFBaUIsRUFBRSxVQUFVO2FBQ2hDO1NBQ0osQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksMEJBQWdCLENBQUMsSUFBSSxFQUFFLHVCQUF1QixFQUFFO1lBQ3hFLE1BQU0sRUFBRSxnQ0FBc0IsQ0FBQyxRQUFRLENBQUMsRUFBRSxPQUFPLEVBQUUsK0JBQXFCLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDcEYsWUFBWSxFQUFFLHNCQUFZLENBQUMsRUFBRSxDQUFDLHVCQUFhLENBQUMsRUFBRSxFQUFFLHNCQUFZLENBQUMsS0FBSyxDQUFDO1lBQ25FLEdBQUcsRUFBRSxLQUFLLENBQUMsR0FBRztZQUNkLFlBQVksRUFBRSxFQUFDLFVBQVUsRUFBRSxvQkFBVSxDQUFDLGdCQUFnQixFQUFDO1lBQ3ZELGdCQUFnQixFQUFFLElBQUk7WUFDdEIsWUFBWSxFQUFFLElBQUksQ0FBQyxZQUFZO1lBQy9CLFdBQVcsRUFBRSxxQkFBVyxDQUFDLG1CQUFtQixDQUFDLFVBQVUsQ0FBQztZQUN4RCxlQUFlLEVBQUUsZUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDakMsa0JBQWtCO1lBQ2xCLHdCQUF3QjtZQUN4QixnQ0FBZ0M7WUFDaEMsNkJBQTZCO1NBQ2hDLENBQUMsQ0FBQztRQUVILElBQUksZ0JBQVMsQ0FBQyxJQUFJLEVBQUUsaUJBQWlCLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxVQUFVLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDMUcsSUFBSSxnQkFBUyxDQUFDLElBQUksRUFBRSxpQkFBaUIsRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLFVBQVUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUUxRyxJQUFJLGdCQUFTLENBQUMsSUFBSSxFQUFFLGFBQWEsRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7UUFDdEUsSUFBSSxnQkFBUyxDQUFDLElBQUksRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO1FBQ3BFLElBQUksZ0JBQVMsQ0FBQyxJQUFJLEVBQUUsaUJBQWlCLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN2RixDQUFDO0NBQ0o7QUE3Q0QsNEJBNkNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtBcHAsIENmbk91dHB1dCwgRHVyYXRpb24sIFN0YWNrLCBTdGFja1Byb3BzfSBmcm9tIFwiQGF3cy1jZGsvY29yZVwiO1xuaW1wb3J0IHtDcmVkZW50aWFscywgRGF0YWJhc2VJbnN0YW5jZSwgRGF0YWJhc2VJbnN0YW5jZUVuZ2luZSwgSURhdGFiYXNlSW5zdGFuY2UsIFBvc3RncmVzRW5naW5lVmVyc2lvbn0gZnJvbSAnQGF3cy1jZGsvYXdzLXJkcyc7XG5pbXBvcnQge0lTZWNyZXQsIFNlY3JldH0gZnJvbSAnQGF3cy1jZGsvYXdzLXNlY3JldHNtYW5hZ2VyJztcbmltcG9ydCB7SW5zdGFuY2VDbGFzcywgSW5zdGFuY2VTaXplLCBJbnN0YW5jZVR5cGUsIFN1Ym5ldFR5cGUsIFZwY30gZnJvbSBcIkBhd3MtY2RrL2F3cy1lYzJcIjtcblxuZXhwb3J0IGludGVyZmFjZSBSRFNTdGFja1Byb3BzIGV4dGVuZHMgU3RhY2tQcm9wcyB7XG4gICAgdnBjOiBWcGM7XG4gICAgc3RhZ2U6IHN0cmluZzsgXG59XG5cbmV4cG9ydCBjbGFzcyBSRFNTdGFjayBleHRlbmRzIFN0YWNrIHtcblxuICAgIHJlYWRvbmx5IGRhdGFiYXNlTmFtZTogc3RyaW5nO1xuICAgIHJlYWRvbmx5IHNlY3JldDogSVNlY3JldDtcbiAgICByZWFkb25seSBwb3N0Z3Jlc0luc3RhbmNlOiBJRGF0YWJhc2VJbnN0YW5jZTtcblxuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiBBcHAsIGlkOiBzdHJpbmcsIHByb3BzOiBSRFNTdGFja1Byb3BzKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpO1xuXG4gICAgICAgIHRoaXMuZGF0YWJhc2VOYW1lID0gYGJsaXR6JHtwcm9wcy5zdGFnZX1gO1xuXG4gICAgICAgIHRoaXMuc2VjcmV0ID0gbmV3IFNlY3JldCh0aGlzLCBgJHtwcm9wcy5zdGFnZX0tREJDcmVkZW50aWFsc1NlY3JldGAsIHtcbiAgICAgICAgICAgIHNlY3JldE5hbWU6IGAke3Byb3BzLnN0YWdlfS1jcmVkZW50aWFsc2AsXG4gICAgICAgICAgICBnZW5lcmF0ZVNlY3JldFN0cmluZzoge1xuICAgICAgICAgICAgICAgIHNlY3JldFN0cmluZ1RlbXBsYXRlOiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgICAgIHVzZXJuYW1lOiAncG9zdGdyZXMnLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIGV4Y2x1ZGVQdW5jdHVhdGlvbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBpbmNsdWRlU3BhY2U6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGdlbmVyYXRlU3RyaW5nS2V5OiAncGFzc3dvcmQnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pOyAgXG4gICAgICAgIFxuICAgICAgICB0aGlzLnBvc3RncmVzSW5zdGFuY2UgPSBuZXcgRGF0YWJhc2VJbnN0YW5jZSh0aGlzLCAncG9zdGdyZXMtcmRzLWluc3RhbmNlJywge1xuICAgICAgICAgICAgZW5naW5lOiBEYXRhYmFzZUluc3RhbmNlRW5naW5lLnBvc3RncmVzKHsgdmVyc2lvbjogUG9zdGdyZXNFbmdpbmVWZXJzaW9uLlZFUl8xM18zIH0pLFxuICAgICAgICAgICAgaW5zdGFuY2VUeXBlOiBJbnN0YW5jZVR5cGUub2YoSW5zdGFuY2VDbGFzcy5UMywgSW5zdGFuY2VTaXplLk1JQ1JPKSxcbiAgICAgICAgICAgIHZwYzogcHJvcHMudnBjLFxuICAgICAgICAgICAgdnBjUGxhY2VtZW50OiB7c3VibmV0VHlwZTogU3VibmV0VHlwZS5QUklWQVRFX0lTT0xBVEVEfSxcbiAgICAgICAgICAgIHN0b3JhZ2VFbmNyeXB0ZWQ6IHRydWUsXG4gICAgICAgICAgICBkYXRhYmFzZU5hbWU6IHRoaXMuZGF0YWJhc2VOYW1lLFxuICAgICAgICAgICAgY3JlZGVudGlhbHM6IENyZWRlbnRpYWxzLmZyb21HZW5lcmF0ZWRTZWNyZXQoJ3Bvc3RncmVzJyksXG4gICAgICAgICAgICBiYWNrdXBSZXRlbnRpb246IER1cmF0aW9uLmRheXMoMylcbiAgICAgICAgICAgIC8vIG11bHRpQXo6IGZhbHNlLFxuICAgICAgICAgICAgLy8gYWxsb2NhdGVkU3RvcmFnZTogMjUsXG4gICAgICAgICAgICAvLyBzdG9yYWdlVHlwZTogU3RvcmFnZVR5cGUuR1AyLFxuICAgICAgICAgICAgLy8gZGVsZXRpb25Qcm90ZWN0aW9uOiBmYWxzZSxcbiAgICAgICAgfSk7ICAgIFxuICAgICAgICBcbiAgICAgICAgbmV3IENmbk91dHB1dCh0aGlzLCAnU2VjcmV0IFVzZXJuYW1lJywgeyB2YWx1ZTogdGhpcy5zZWNyZXQuc2VjcmV0VmFsdWVGcm9tSnNvbigndXNlcm5hbWUnKS50b1N0cmluZygpIH0pOyBcbiAgICAgICAgbmV3IENmbk91dHB1dCh0aGlzLCAnU2VjcmV0IFBhc3N3b3JkJywgeyB2YWx1ZTogdGhpcy5zZWNyZXQuc2VjcmV0VmFsdWVGcm9tSnNvbigncGFzc3dvcmQnKS50b1N0cmluZygpIH0pOyBcbiAgICAgICAgXG4gICAgICAgIG5ldyBDZm5PdXRwdXQodGhpcywgJ1NlY3JldCBOYW1lJywgeyB2YWx1ZTogdGhpcy5zZWNyZXQuc2VjcmV0TmFtZSB9KTsgXG4gICAgICAgIG5ldyBDZm5PdXRwdXQodGhpcywgJ1NlY3JldCBBUk4nLCB7IHZhbHVlOiB0aGlzLnNlY3JldC5zZWNyZXRBcm4gfSk7IFxuICAgICAgICBuZXcgQ2ZuT3V0cHV0KHRoaXMsICdTZWNyZXQgRnVsbCBBUk4nLCB7IHZhbHVlOiB0aGlzLnNlY3JldC5zZWNyZXRGdWxsQXJuIHx8ICcnIH0pO1xuICAgIH1cbn0iXX0=